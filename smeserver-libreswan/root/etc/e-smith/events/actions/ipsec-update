#!/usr/bin/perl -w
#----------------------------------------------------------------------
# Ipsec actions
# Copyright (C) 2015 John Crisp
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License or more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA
#----------------------------------------------------------------------

# Note that we do not need to use the init ipsec script - we can start and
# stop directly using /usr/sbin/ipsec which will call the init script

use strict;
use warnings;
use esmith::ConfigDB;

my $configDB = esmith::ConfigDB->open_ro or die("can't open Config DB");
my $ipsecDB = esmith::ConfigDB->open_ro('ipsec_connections')
  or die("cant connect to ipsec database");

my $dbKey = 'ipsec';

# If the service is set disabled then make sure it is stopped
if ( $configDB->get_prop( $dbKey, 'status' ) eq 'disabled' )
{
	my $myStopConnection = qx(/etc/rc.d/init.d/ipsec stop);

	#exec("/usr/sbin/ipsec stop >/dev/null")
	# or die("A problem occurred stopping ipsec");
	exit 0;
}

# If the service is set to enabled AND running (then check the connections)
if ( $configDB->get_prop( $dbKey, 'status' ) eq 'enabled' )
{

	my $status = (`ps ax | grep -v grep | grep pluto`);

#If the service is running
	if ( $status =~ m/pluto/ )
	{
# Lets do some shit
		print "ipsec is running!\n";
		my @connections = $ipsecDB->keys;

		foreach my $ipsecprop (@connections)
		{
#Check the individual connection status
			my $ipsecstatus =
			  $ipsecDB->get_prop( "$ipsecprop", 'status' ) || "disabled";

# If we are enabled
			if ( $ipsecstatus eq "enabled" )
			{
				print "reReading Secrets\n";

# system ("/usr/sbin/ipsec auto --rereadsecrets") or die("A problem occurred rereading secrets");
				my $reread = qx(/usr/sbin/ipsec auto --rereadsecrets);

				print "Restarting connection $ipsecprop\n";

#system ("/usr/sbin/ipsec auto --replace $ipsecprop") or die("A problem occurred restarting $ipsecprop");
				my $restart = qx(/usr/sbin/ipsec auto --replace $ipsecprop);
			}

			# If status is disabled then stop it
			else
			{
				my $stopConnection = qx(/usr/sbin/ipsec --down $ipsecprop);
			}

		}

	}

# If it isn't running then start it up
# Auto connections start themselves. Added connections wait
	else
	{
		print "ipsec isn't running so start ipsec\n";
		my $myStartConnection = qx(/etc/rc.d/init.d/ipsec start);

		#      or die("A problem occurred starting ipsec");
		exit 0;
	}

}

exit(0);
