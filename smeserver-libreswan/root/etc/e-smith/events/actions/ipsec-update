#!/usr/bin/perl -w
#----------------------------------------------------------------------
# Ipsec actions
# Copyright (C) 2015 John Crisp
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License or more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA
#----------------------------------------------------------------------

# Note that we do not need to use the init ipsec script - we can start and
# stop directly using /usr/sbin/ipsec which will call the init script

use strict;
use warnings;
use esmith::ConfigDB;

my $configDB = esmith::ConfigDB->open_ro or die("can't open Config DB");
my $ipsecDB = esmith::ConfigDB->open_ro('ipsec_connections')
  or die("cant connect to ipsec database");

my $dbKey = 'ipsec';


# If the service is set disabled then make sure it is stopped
if ( $configDB->get_prop( $dbKey, 'status' ) eq 'disabled' )
{
	exec("/usr/sbin/ipsec stop >/dev/null") or die("A problem occurred stopping ipsec");
	exit 0;
}

# If the service is set to enabled AND running (then check the connections)
if ( $configDB->get_prop( $dbKey, 'status' ) eq 'enabled' )
{

	my $status = (`ps ax | grep -v grep | grep pluto;`);

	#If the service is running
	if ( $status =~ m/ipsec/ )
	{
		# Lets do some shit
		print "ipsec is running!\n";
		my @connections = $ipsecDB->keys;

		foreach my $ipsecprop (@connections)
		{
			my $ipsecstatus = $ipsecDB->get_prop( "$ipsecprop", 'status' ) || "disabled";
			if ( $ipsecstatus eq "enabled" )
			{
				print "reRead Secrets\n";
				exec ("/usr/sbin/ipsec auto --rereadsecrets") or die("A problem occurred rereading secrets");
				print "restart connection $ipsecprop\n";
				exec ("/usr/sbin/ipsec auto --replace $ipsecprop"); or die("A problem occurred restarting $ipsecprop")
			}
		}

	}
	#If it isn't running then start it up
	else
	{
		print "ipsec isn't running so start ipsec\n";
		exec("/usr/sbin/ipsec start") or die("A problem occurred starting ipsec");
		# print "ipsec isnt running\n\n";
	}

}


# Restart all

# exec("/etc/init.d/ipsec service restart") or die("A problem occurred execing ipsec");


# exec("/etc/init.d/ipsec service stop")  or die("A problem occurred execing ipsec");

# Check each connection

# Need to decide

# Check connection status enabled or disabled

# for each connection

# Check running status

# if running and disabled stop
# if running and enabled leave
# if stopped and disabled leave
# if stopped and enabled start

#exec /sbin/ e-smith / config delprop pptpd Interfaces
#  exec( "/sbin/e-smith/dynamic-dns/$service",
#		$ipaddress->value, $account, $password, $domain )
#
#  exec( "/bin/mt", "-f", $device, "eject" );
#die("A problem occurred execing mt");
#
#( "/sbin/shutdown", qw(-h now) ) or die "Can't exec shutdown: $!";
#
#exec /etc/init . d / ipsec auto-- rereadsecrets
#
#  ipsec auto-- replace HomeToTest


# If we CL arguments we can add this....

## What CL event calls us ? If we are called with an argument
#my $event = $ARGV[0];
#
#my $function = $event;
#$function =~ s/ipsec-//;
#
#die "Unknown function $event\n"
#  unless ( $event =~ /stop|restart|password-update/ );
